name: ImmortalWrt Image Builder (v24.10.2)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

concurrency:
  group: immortalwrt-imagebuilder-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  PROFILE: generic
  UCI_CUSTOM_FILE: uci-custom
  PACKAGES_LIST_FILE: packages.list
  PACKAGES_FOLDER: packages
  ROOTFS_PARTSIZE: 1024
  DOWNLOAD_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: "true"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip \
          python3 zstd qemu-utils genisoimage ca-certificates

    - name: Download and extract Image Builder
      run: |
        wget -O /tmp/imagebuilder.tar.zst "$DOWNLOAD_URL"
        sudo tar -I zstd -C /tmp -xvf /tmp/imagebuilder.tar.zst

    - name: Set Image Builder root directory
      run: |
        ROOT_DIRECTORY=$(basename "$DOWNLOAD_URL" .tar.zst)
        echo "ROOT_DIRECTORY=/tmp/$ROOT_DIRECTORY" >> "$GITHUB_ENV"

    - name: Prepare files and packages
      run: |
        sudo mkdir -p "$ROOT_DIRECTORY/files/etc/uci-defaults"
        sudo mkdir -p "$ROOT_DIRECTORY/packages"
        if [ -f "$UCI_CUSTOM_FILE" ]; then
          sudo cp "$UCI_CUSTOM_FILE" "$ROOT_DIRECTORY/files/etc/uci-defaults/"
        fi
        if [ -f "$PACKAGES_LIST_FILE" ]; then
          sudo cp "$PACKAGES_LIST_FILE" "$ROOT_DIRECTORY/files/packages.list"
        fi
        if [ -d "$PACKAGES_FOLDER" ] && ls "$PACKAGES_FOLDER"/*.ipk >/dev/null 2>&1; then
          sudo cp "$PACKAGES_FOLDER"/*.ipk "$ROOT_DIRECTORY/packages/"
        fi

    - name: Modify .config
      run: |
        CONFIG_FILE="$ROOT_DIRECTORY/.config"
        if [ "${{ env.PROFILE }}" = "generic" ] && [ -n "${{ env.ROOTFS_PARTSIZE }}" ]; then
          if grep -q '^CONFIG_TARGET_ROOTFS_PARTSIZE=' "$CONFIG_FILE"; then
            sudo sed -i 's/^CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}/' "$CONFIG_FILE"
          else
            echo "CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}" | sudo tee -a "$CONFIG_FILE" >/dev/null
          fi
        fi

    - name: Compile firmware
      run: |
        set -e
        cd "$ROOT_DIRECTORY"
        if [ -f "files/packages.list" ]; then
          PACKAGES=$(grep -vE '^\s*#' "files/packages.list" | sed '/^\s*$/d' | tr '\n' ' ')
        else
          PACKAGES=""
        fi
        sudo make image PROFILE="${{ env.PROFILE }}" PACKAGES="$PACKAGES" FILES="files"
        echo "FILE_DATE=$(date +%Y%m%d%H%M)" >> "$GITHUB_ENV"
        sudo mkdir -p /tmp/bin_firmware
        sudo find bin -type f -exec sudo cp {} /tmp/bin_firmware/ \;

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: ImmortalWrt-firmware-${{ env.PROFILE }}-${{ env.FILE_DATE }}
        path: /tmp/bin_firmware

    - name: Create release and upload firmware
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: softprops/action-gh-release@v2
      with:
        tag_name: auto-release-${{ env.FILE_DATE }}
        name: ImmortalWrt-${{ env.PROFILE }}-${{ env.FILE_DATE }}
        body: |
          自动发布固件
          PROFILE=${{ env.PROFILE }}
          构建时间=${{ env.FILE_DATE }}
        files: /tmp/bin_firmware/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old releases
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
