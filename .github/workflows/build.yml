name: ImmortalWrt Image Builder (nikki)
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  PROFILE: generic
  UCI_CUSTOM_FILE: uci-custom
  PACKAGES_LIST_FILE: packages.list
  PACKAGES_FOLDER: packages
  ROOTFS_PARTSIZE: 1024   # Reconfigure the rootfs partition size (for x86 build only), variable set in MB
  DOWNLOAD_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
  SDK_DOWNLOAD_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-sdk-24.10.2-x86-64.Linux-x86_64.tar.zst
  NIKKI_REPO: https://github.com/nikkinikki-org/OpenWrt-nikki
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -y
        sudo apt-get full-upgrade -y
        sudo apt-get install -y build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 python3-lib2to3 zstd qemu-utils genisoimage jq

    - name: Download and extract Image Builder
      run: |
        wget -O /tmp/imagebuilder.tar.zst $DOWNLOAD_URL
        sudo tar -I zstd -C /tmp -xvf /tmp/imagebuilder.tar.zst

    - name: Set Image Builder root directory
      run: |
        ROOT_DIRECTORY=$(basename $DOWNLOAD_URL .tar.zst)
        echo "ROOT_DIRECTORY=/tmp/$ROOT_DIRECTORY" >> $GITHUB_ENV

    - name: Fetch or build nikki .ipk (try releases first, fallback to SDK build)
      run: |
        set -e
        mkdir -p /tmp/nikki
        # Clone repo for package source as fallback
        git clone --depth 1 $NIKKI_REPO /tmp/nikki/src || true

        # Try to download latest release .ipk from GitHub releases
        echo "Trying to get prebuilt .ipk from GitHub releases..."
        API_JSON=$(curl -s "https://api.github.com/repos/nikkinikki-org/OpenWrt-nikki/releases/latest" || echo "")
        ASSET_URL=$(echo "$API_JSON" | jq -r '.assets[]?.browser_download_url | select(endswith(".ipk"))' | head -n1 || true)
        if [ -n "$ASSET_URL" ]; then
          echo "Found release asset: $ASSET_URL"
          wget -O /tmp/nikki/nikki.ipk "$ASSET_URL"
        else
          echo "No prebuilt .ipk found in releases. Will try to build using ImmortalWrt SDK."
          # Download SDK (fallback)
          wget -O /tmp/sdk.tar.zst $SDK_DOWNLOAD_URL
          sudo tar -I zstd -C /tmp -xvf /tmp/sdk.tar.zst
          SDK_DIR=$(basename $SDK_DOWNLOAD_URL .tar.zst)
          # Try to copy package into SDK package folder. The repo may contain package/nikki or just package files.
          if [ -d /tmp/nikki/src/package/nikki ]; then
            cp -r /tmp/nikki/src/package/nikki /tmp/$SDK_DIR/package/
          else
            # try to copy top-level package directory if it exists
            cp -r /tmp/nikki/src/* /tmp/$SDK_DIR/package/ || true
          fi
          # Build the package using SDK
          cd /tmp/$SDK_DIR
          # run make for the package; ignore non-fatal failures but try to produce ipk
          make package/nikki/compile -j$(nproc) || true
          # collect any produced .ipk files
          find . -type f -name "*.ipk" -exec cp {} /tmp/nikki/ \; || true
        fi

        # list collected ipks
        echo "Collected ipk files in /tmp/nikki:"
        ls -la /tmp/nikki || true

    - name: Modify .config file
      run: |
        CONFIG_FILE="$ROOT_DIRECTORY/.config"
        # Disable iso and virtual disk image generation for x86 (example; keep commented unless needed)
        # sudo sed -i 's/^CONFIG_ISO_IMAGES=y/# CONFIG_ISO_IMAGES is not set/' $CONFIG_FILE
        # Reconfigure the rootfs partition size (for x86 build only)
        if [ -n "${{ env.ROOTFS_PARTSIZE }}" ] && [ "${{ env.PROFILE }}" = "generic" ]; then
          sudo sed -i 's/CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}/g' $CONFIG_FILE
        fi

    - name: Copy files (UCI, packages list, .ipk into imagebuilder)
      run: |
        set -e || true
        # Creator folders
        sudo mkdir -p $ROOT_DIRECTORY/files/etc/uci-defaults
        sudo mkdir -p $ROOT_DIRECTORY/packages
        # Copy custom setting file (if exists)
        if [ -f "$UCI_CUSTOM_FILE" ]; then
          sudo cp "$UCI_CUSTOM_FILE" $ROOT_DIRECTORY/files/etc/uci-defaults/
        else
          echo "Warning: $UCI_CUSTOM_FILE not found in repo root, skipping."
        fi
        # Copy packages list (if exists)
        if [ -f "$PACKAGES_LIST_FILE" ]; then
          sudo cp "$PACKAGES_LIST_FILE" $ROOT_DIRECTORY/files/packages.list
        else
          echo "Warning: $PACKAGES_LIST_FILE not found in repo root, skipping."
        fi
        # Copy ipk files from repository's packages folder (if any)
        if compgen -G "$PACKAGES_FOLDER/*.ipk" > /dev/null 2>&1; then
          sudo cp $PACKAGES_FOLDER/*.ipk $ROOT_DIRECTORY/packages/ || true
        else
          echo "No ipk files in $PACKAGES_FOLDER"
        fi
        # Copy produced/downlaoded nikki ipk(s) into imagebuilder packages folder
        if compgen -G "/tmp/nikki/*.ipk" > /dev/null 2>&1; then
          sudo cp /tmp/nikki/*.ipk $ROOT_DIRECTORY/packages/ || true
        else
          echo "No nikki ipk produced or downloaded. If you expect nikki to be included, ensure releases contain ipk or SDK build succeeded."
        fi
        # show what packages will be available to imagebuilder
        echo "Final content of $ROOT_DIRECTORY/packages:"
        ls -la $ROOT_DIRECTORY/packages || true

    - name: Compile firmware
      run: |
        cd $ROOT_DIRECTORY
        PACKAGES=$(cat $ROOT_DIRECTORY/files/packages.list | tr '\n' ' ' || true)
        echo "PACKAGES to include: $PACKAGES"
        sudo make image PROFILE="$PROFILE" PACKAGES="$PACKAGES" FILES="files"
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        # Organize files
        sudo mkdir -p /tmp/bin_firmware
        sudo find bin -type f -exec sudo cp {} /tmp/bin_firmware/ \;

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      with:
        name: ImmortalWrt-firmware-${{ env.PROFILE }}-${{ env.FILE_DATE }}
        path: /tmp/bin_firmware

    - name: Create Release and Upload Firmware
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "auto-release-${{ env.FILE_DATE }}"
        name: "ImmortalWrt-${{ env.PROFILE }}-${{ env.FILE_DATE }}"
        body: |
          自动发布固件，PROFILE=${{ env.PROFILE }}，构建时间=${{ env.FILE_DATE }}
        files: /tmp/bin_firmware/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
