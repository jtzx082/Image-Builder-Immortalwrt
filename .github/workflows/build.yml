name: ImmortalWrt Image Builder (nikki)
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  PROFILE: generic
  UCI_CUSTOM_FILE: uci-custom
  PACKAGES_LIST_FILE: packages.list
  PACKAGES_FOLDER: packages
  ROOTFS_PARTSIZE: 1024   # Reconfigure the rootfs partition size (for x86 build only), variable set in MB
  DOWNLOAD_URL: https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-imagebuilder-24.10.2-x86-64.Linux-x86_64.tar.zst
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -y
        sudo apt-get full-upgrade -y
        sudo apt-get install -y build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 python3-lib2to3 zstd qemu-utils genisoimage jq

    - name: Download and extract Image Builder
      run: |
        wget -O /tmp/imagebuilder.tar.zst $DOWNLOAD_URL
        sudo tar -I zstd -C /tmp -xvf /tmp/imagebuilder.tar.zst

    - name: Set Image Builder root directory
      run: |
        ROOT_DIRECTORY=$(basename $DOWNLOAD_URL .tar.zst)
        echo "ROOT_DIRECTORY=/tmp/$ROOT_DIRECTORY" >> $GITHUB_ENV

    - name: Fetch or build nikki .ipk (try releases first, then try multiple SDK variants; handle SDK 404 gracefully)
      run: |
        set -e
        mkdir -p /tmp/nikki
        # Clone repo for package source as fallback (so we have sources if we can build)
        git clone --depth 1 https://github.com/nikkinikki-org/OpenWrt-nikki /tmp/nikki/src || true

        # 1) Try to download prebuilt .ipk from GitHub Releases (preferred)
        echo "Trying to get prebuilt .ipk from GitHub releases..."
        API_JSON=$(curl -s "https://api.github.com/repos/nikkinikki-org/OpenWrt-nikki/releases/latest" || echo "")
        ASSET_URL=$(echo "$API_JSON" | jq -r '.assets[]?.browser_download_url | select(endswith(".ipk"))' | head -n1 || true)
        if [ -n "$ASSET_URL" ]; then
          echo "Found release asset: $ASSET_URL"
          wget -O /tmp/nikki/nikki.ipk "$ASSET_URL"
        else
          echo "No prebuilt .ipk found in releases. Will try to locate an ImmortalWrt SDK to build the package."

          # 2) Try multiple SDK filename variants (don't assume only .tar.zst exists)
          SDK_BASE_URL=$(dirname "$DOWNLOAD_URL")
          SDK_BASENAME=$(basename "$DOWNLOAD_URL" .tar.zst | sed 's/imagebuilder/sdk/')
          SDK_CANDIDATES=(
            "$SDK_BASE_URL/$SDK_BASENAME.tar.zst"
            "$SDK_BASE_URL/$SDK_BASENAME.tar.xz"
            "$SDK_BASE_URL/$SDK_BASENAME.tar.gz"
          )

          SDK_URL=""
          for candidate in "${SDK_CANDIDATES[@]}"; do
            echo "Checking $candidate ..."
            if curl -sI --max-time 20 "$candidate" | sed -n '1p' | grep -qiE '200|302'; then
              SDK_URL="$candidate"
              break
            fi
          done

          if [ -n "$SDK_URL" ]; then
            echo "Found SDK at $SDK_URL. Downloading..."
            wget -O /tmp/sdk.tar "${SDK_URL}"
            # detect extension and extract appropriately
            if echo "$SDK_URL" | grep -qE '\.tar\.zst$'; then
              sudo tar -I zstd -C /tmp -xvf /tmp/sdk.tar
            elif echo "$SDK_URL" | grep -qE '\.tar\.xz$'; then
              sudo tar -C /tmp -xJvf /tmp/sdk.tar
            elif echo "$SDK_URL" | grep -qE '\.tar\.gz$'; then
              sudo tar -C /tmp -xzvf /tmp/sdk.tar
            else
              echo "Unknown SDK archive format, attempting tar auto-detect..."
              sudo tar -C /tmp -xvf /tmp/sdk.tar || true
            fi

            # Determine extracted SDK dir (first immortalwrt-sdk* folder under /tmp)
            SDK_DIR=$(find /tmp -maxdepth 1 -type d -name "immortalwrt-sdk-*" -print -quit || true)
            if [ -z "$SDK_DIR" ]; then
              # fallback: derive from SDK_BASENAME
              SDK_DIR="/tmp/$SDK_BASENAME"
            fi
            echo "Using SDK_DIR=$SDK_DIR"

            # Copy package sources into SDK package/ directory if present
            if [ -d /tmp/nikki/src/package/nikki ]; then
              sudo mkdir -p "$SDK_DIR/package"
              sudo cp -r /tmp/nikki/src/package/nikki "$SDK_DIR/package/" || true
            else
              sudo mkdir -p "$SDK_DIR/package"
              sudo cp -r /tmp/nikki/src/* "$SDK_DIR/package/" || true
            fi

            # Try to build the nikki package with SDK (best-effort)
            echo "Attempting to build nikki package inside SDK (best-effort)..."
            cd "$SDK_DIR"
            # Some SDKs need feeds update; try to run make for the package
            make package/nikki/compile -j$(nproc) || true

            # collect any produced .ipk files
            find . -type f -name "*.ipk" -exec cp {} /tmp/nikki/ \; || true
          else
            echo "No ImmortalWrt SDK found for this release (checked .tar.zst, .tar.xz, .tar.gz). Skipping SDK build step."
            echo "If you need nikki included automatically, place a prebuilt .ipk into the repository's packages/ folder or add the ipk to your releases."
          fi
        fi

        # list collected ipks (if any)
        echo "Collected ipk files in /tmp/nikki:"
        ls -la /tmp/nikki || true

    - name: Modify .config file
      run: |
        CONFIG_FILE="$ROOT_DIRECTORY/.config"
        # Reconfigure the rootfs partition size (for x86 build only)
        if [ -n "${{ env.ROOTFS_PARTSIZE }}" ] && [ "${{ env.PROFILE }}" = "generic" ]; then
          sudo sed -i 's/CONFIG_TARGET_ROOTFS_PARTSIZE=.*/CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}/g' $CONFIG_FILE
        fi

    - name: Copy files (UCI, packages list, .ipk into imagebuilder)
      run: |
        set -e || true
        # Creator folders
        sudo mkdir -p $ROOT_DIRECTORY/files/etc/uci-defaults
        sudo mkdir -p $ROOT_DIRECTORY/packages
        # Copy custom setting file (if exists)
        if [ -f "$UCI_CUSTOM_FILE" ]; then
          sudo cp "$UCI_CUSTOM_FILE" $ROOT_DIRECTORY/files/etc/uci-defaults/
        else
          echo "Warning: $UCI_CUSTOM_FILE not found in repo root, skipping."
        fi
        # Copy packages list (if exists)
        if [ -f "$PACKAGES_LIST_FILE" ]; then
          sudo cp "$PACKAGES_LIST_FILE" $ROOT_DIRECTORY/files/packages.list
        else
          echo "Warning: $PACKAGES_LIST_FILE not found in repo root, creating an empty one."
          sudo touch $ROOT_DIRECTORY/files/packages.list
        fi
        # Copy ipk files from repository's packages folder (if any)
        if compgen -G "$PACKAGES_FOLDER/*.ipk" > /dev/null 2>&1; then
          sudo cp $PACKAGES_FOLDER/*.ipk $ROOT_DIRECTORY/packages/ || true
        else
          echo "No ipk files in $PACKAGES_FOLDER"
        fi
        # Copy produced/downloaded nikki ipk(s) into imagebuilder packages folder (if any)
        if compgen -G "/tmp/nikki/*.ipk" > /dev/null 2>&1; then
          sudo cp /tmp/nikki/*.ipk $ROOT_DIRECTORY/packages/ || true

          # Try to derive package name(s) from ipk filenames and append to packages.list if not present
          for ipk in /tmp/nikki/*.ipk; do
            pkgname=$(basename "$ipk" | sed 's/_.*//')
            if ! grep -qxF "$pkgname" $ROOT_DIRECTORY/files/packages.list; then
              echo "Adding $pkgname to $ROOT_DIRECTORY/files/packages.list"
              echo "$pkgname" | sudo tee -a $ROOT_DIRECTORY/files/packages.list > /dev/null
            fi
          done
        else
          echo "No nikki ipk produced or downloaded. If you expect nikki to be included, ensure releases contain ipk or provide the ipk in the repository packages/ folder."
        fi
        # show what packages will be available to imagebuilder
        echo "Final content of $ROOT_DIRECTORY/packages:"
        ls -la $ROOT_DIRECTORY/packages || true
        echo "Final content of $ROOT_DIRECTORY/files/packages.list:"
        cat $ROOT_DIRECTORY/files/packages.list || true

    - name: Compile firmware
      run: |
        cd $ROOT_DIRECTORY
        PACKAGES=$(cat $ROOT_DIRECTORY/files/packages.list | tr '\n' ' ' || true)
        echo "PACKAGES to include: $PACKAGES"
        sudo make image PROFILE="$PROFILE" PACKAGES="$PACKAGES" FILES="files"
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        # Organize files
        sudo mkdir -p /tmp/bin_firmware
        sudo find bin -type f -exec sudo cp {} /tmp/bin_firmware/ \;

    - name: Upload firmware
      uses: actions/upload-artifact@v4
      with:
        name: ImmortalWrt-firmware-${{ env.PROFILE }}-${{ env.FILE_DATE }}
        path: /tmp/bin_firmware

    - name: Create Release and Upload Firmware
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "auto-release-${{ env.FILE_DATE }}"
        name: "ImmortalWrt-${{ env.PROFILE }}-${{ env.FILE_DATE }}"
        body: |
          自动发布固件，PROFILE=${{ env.PROFILE }}，构建时间=${{ env.FILE_DATE }}
        files: /tmp/bin_firmware/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
